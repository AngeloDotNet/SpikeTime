@page "/weather"
@rendermode InteractiveServer

<PageTitle>Weather</PageTitle>

<h1>Weather</h1>

<p>This component demonstrates showing data.</p>

<p>@selectedColumns</p>

@if (forecasts == null)
{
    <p><em>Loading...</em></p>
}
else
{
    <RadzenDataGrid Data="@forecasts"
                    AllowFiltering="true"
                    AllowPaging="true"
                    AllowColumnResize="true" 
                    AllowAlternatingRows="false" 
                    FilterMode="FilterMode.Advanced" 
                    AllowSorting="true" 
                    PageSize="3">
        <Columns>
            <RadzenDataGridColumn Title="Date" Property="@nameof(WeatherForecast.Date)" FormatString="{0:dd/MM/yyyy}" />
            <RadzenDataGridColumn Title="°C" Property="@nameof(WeatherForecast.TemperatureC)" />
            <RadzenDataGridColumn Title="F" Property="@nameof(WeatherForecast.TemperatureF)" />
            <RadzenDataGridColumn Title="Summary" Property="@nameof(WeatherForecast.Summary)" />
        </Columns>
    </RadzenDataGrid>

    @*<table class="table">
        <thead>
            <tr>
                <th>Date</th>
                <th>Temp. (C)</th>
                <th>Temp. (F)</th>
                <th>Summary</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var forecast in forecasts)
            {
                <tr>
                    <td>@forecast.Date.ToShortDateString()</td>
                    <td>@forecast.TemperatureC</td>
                    <td>@forecast.TemperatureF</td>
                    <td>@forecast.Summary</td>
                </tr>
            }
        </tbody>
    </table>*@
}

@code {
    private IQueryable<WeatherForecast>? forecasts;

    private string selectedColumns = string.Empty;

    protected override async Task OnInitializedAsync()
    {
        // Simulate asynchronous loading to demonstrate streaming rendering
        await Task.Delay(500);

        var startDate = DateOnly.FromDateTime(DateTime.Now);
        var summaries = new[] { "Freezing", "Bracing", "Chilly", "Cool", "Mild", "Warm", "Balmy", "Hot", "Sweltering", "Scorching" };
        forecasts = Enumerable.Range(1, 10).Select(index => new WeatherForecast
        {
            Date = startDate.AddDays(index),
            TemperatureC = Random.Shared.Next(-20, 55),
            Summary = summaries[Random.Shared.Next(summaries.Length)]
        }).AsQueryable();
    }

    //private void PickedColumnsChanged(DataGridPickedColumnsChangedEventArgs<WeatherForecast> args)
    //{
    //    selectedColumns = string.Join(",", args.Columns.Select(c => c.Property));
    //}

    private class WeatherForecast
    {
        public DateOnly Date { get; set; }
        public int TemperatureC { get; set; }
        public string? Summary { get; set; }
        public int TemperatureF => 32 + (int)(TemperatureC / 0.5556);
    }
}
